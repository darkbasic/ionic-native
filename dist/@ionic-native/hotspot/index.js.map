{"version":3,"sources":["../../../src/@ionic-native/plugins/hotspot/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface HotspotConnectionInfo {\n\n  /**\n   *      The service set identifier (SSID) of the current 802.11 network.\n   */\n  SSID: string;\n\n  /**\n   *      The basic service set identifier (BSSID) of the current access point.\n   */\n  BSSID: string;\n\n  /**\n   *      The current link speed in Mbps\n   */\n  linkSpeed: string;\n\n  /**\n   *      The IP Address\n   */\n  IPAddress: string;\n\n  /**\n   *      Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant.\n   */\n  networkID: string;\n\n}\n\nexport interface HotspotNetwork {\n\n  /**\n   *      Human readable network name\n   */\n  SSID: string;\n\n  /**\n   *      MAC Address of the access point\n   */\n  BSSID: string;\n\n  /**\n   *      The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.\n   */\n  frequency: number;\n\n  /**\n   *      The detected signal level in dBm, also known as the RSSI.\n   */\n  level: number;\n\n  /**\n   *      Timestamp in microseconds (since boot) when this result was last seen.\n   */\n  timestamp: number;\n\n  /**\n   *      Describes the authentication, key management, and encryption schemes supported by the access point.\n   */\n  capabilities: string;\n\n}\nexport interface HotspotNetworkConfig {\n\n  /**\n   *   Device IP Address\n   */\n  deviceIPAddress: string;\n\n  /**\n   *   Device MAC Address\n   */\n  deviceMacAddress: string;\n\n  /**\n   *   Gateway IP Address\n   */\n  gatewayIPAddress: string;\n\n  /**\n   *   Gateway MAC Address\n   */\n  gatewayMacAddress: string;\n\n}\n\nexport interface HotspotDevice {\n\n  /**\n   *      Hotspot IP Address\n   */\n  ip: string;\n\n  /**\n   *      Hotspot MAC Address\n   */\n  mac: string;\n\n}\n\n/**\n * @beta\n * @name Hotspot\n * @description\n * @usage\n * ```typescript\n * import { Hotspot, HotspotNetwork } from '@ionic-native/hotspot';\n *\n * constructor(private hotspot: Hotspot) { }\n *\n * ...\n *\n *\n * this.hotspot.scanWifi().then((networks: Array<HotspotNetwork>) => {\n *     console.log(networks);\n * });\n *\n * ```\n * @interfaces\n * HotspotConnectionInfo\n * HotspotNetwork\n * HotspotNetworkConfig\n * HotspotDevice\n */\n@Plugin({\n  pluginName: 'Hotspot',\n  plugin: 'cordova-plugin-hotspot',\n  pluginRef: 'cordova.plugins.hotspot',\n  repo: 'https://github.com/hypery2k/cordova-hotspot-plugin',\n  platforms: ['Android']\n})\n\nexport class Hotspot extends IonicNativePlugin {\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isAvailable(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  toggleWifi(): Promise<boolean> { return; }\n\n  /**\n   * Configures and starts hotspot with SSID and Password\n   *\n   * @param {string}    SSID        - SSID of your new Access Point\n   * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n   * @param {string}    password    - password for your new Access Point\n   *\n   * @returns {Promise<void>}        - Promise to call once hotspot is started, or reject upon failure\n   */\n  @Cordova()\n  createHotspot(ssid: string, mode: string, password: string): Promise<void> { return; }\n\n  /**\n   * Turns on Access Point\n   *\n   * @returns {Promise<boolean>} - true if AP is started\n   */\n  @Cordova()\n  startHotspot(): Promise<boolean> { return; }\n\n  /**\n   * Configures hotspot with SSID and Password\n   *\n   * @param {string}    SSID        - SSID of your new Access Point\n   * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n   * @param {string}    password    - password for your new Access Point\n   *\n   * @returns {Promise<void>}        - Promise to call when hotspot is configured, or reject upon failure\n   */\n  @Cordova()\n  configureHotspot(ssid: string, mode: string, password: string): Promise<void> { return; }\n\n  /**\n   * Turns off Access Point\n   *\n   * @returns {Promise<boolean>} - Promise to turn off the hotspot, true on success, false on failure\n   */\n  @Cordova()\n  stopHotspot(): Promise<boolean> { return; }\n\n  /**\n   * Checks if hotspot is enabled\n   *\n   * @returns {Promise<void>}    - Promise that hotspot is enabled, rejected if it is not enabled\n   */\n  @Cordova()\n  isHotspotEnabled(): Promise<void> { return; }\n\n  /**\n   * @returns {Promise<Array<HotspotDevice>>}\n   */\n  @Cordova()\n  getAllHotspotDevices(): Promise<Array<HotspotDevice>> { return; }\n\n  /**\n   * Connect to a WiFi network\n   *\n   * @param {string}    ssid\n   *      SSID to connect\n   * @param {string}    password\n   *      password to use\n   *\n   * @returns {Promise<void>}\n   *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n   */\n  @Cordova()\n  connectToWifi(ssid: string, password: string): Promise<void> { return; }\n\n  /**\n   * Connect to a WiFi network\n   *\n   * @param {string}   ssid\n   *      SSID to connect\n   * @param {string}   password\n   *      Password to use\n   * @param {string}   authentication\n   *      Authentication modes to use (LEAP, SHARED, OPEN)\n   * @param {string[]} encryption\n   *      Encryption modes to use (CCMP, TKIP, WEP104, WEP40)\n   *\n   * @returns {Promise<void>}\n   *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n   */\n  @Cordova()\n  connectToWifiAuthEncrypt(ssid: string, password: string, authentication: string, encryption: Array<string>): Promise<void> { return; }\n\n  /**\n   * Add a WiFi network\n   *\n   * @param {string}    ssid\n   *      SSID of network\n   * @param {string}    mode\n   *      Authentication mode of (Open, WEP, WPA, WPA_PSK)\n   * @param {string}    password\n   *      Password for network\n   *\n   * @returns {Promise<void>}\n   *      Promise that adding the WiFi network was successfull, rejected if unsuccessful\n   */\n  @Cordova()\n  addWifiNetwork(ssid: string, mode: string, password: string): Promise<void> { return; }\n\n  /**\n   * Remove a WiFi network\n   *\n   * @param {string}    ssid\n   *      SSID of network\n   *\n   * @returns {Promise<void>}\n   *      Promise that removing the WiFi network was successfull, rejected if unsuccessful\n   */\n  @Cordova()\n  removeWifiNetwork(ssid: string): Promise<void> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isConnectedToInternet(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isConnectedToInternetViaWifi(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isWifiOn(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isWifiSupported(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isWifiDirectSupported(): Promise<boolean> { return; }\n\n  /**\n   * @returns {Promise<Array<HotspotNetwork>>}\n   */\n  @Cordova()\n  scanWifi(): Promise<Array<HotspotNetwork>> { return; }\n\n  /**\n   * @returns {Promise<Array<HotspotNetwork>>}\n   */\n  @Cordova()\n  scanWifiByLevel(): Promise<Array<HotspotNetwork>> { return; }\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  startWifiPeriodicallyScan(interval: number, duration: number): Promise<any> { return; }\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopWifiPeriodicallyScan(): Promise<any> { return; }\n\n  /**\n   * @returns {Promise<HotspotNetworkConfig>}\n   */\n  @Cordova()\n  getNetConfig(): Promise<HotspotNetworkConfig> { return; }\n\n  /**\n   * @returns {Promise<HotspotConnectionInfo>}\n   */\n  @Cordova()\n  getConnectionInfo(): Promise<HotspotConnectionInfo> { return; }\n\n  /**\n   * @returns {Promise<string>}\n   */\n  @Cordova()\n  pingHost(ip: string): Promise<string> { return; }\n\n  /**\n   * Gets MAC Address associated with IP Address from ARP File\n   *\n   * @param {string}        ip  - IP Address that you want the MAC Address of\n   *\n   * @returns {Promise<string>}  - A Promise for the MAC Address\n   */\n  @Cordova()\n  getMacAddressOfHost(ip: string): Promise<string> { return; }\n\n  /**\n   * Checks if IP is live using DNS\n   *\n   * @param {string}        ip  - IP Address you want to test\n   *\n   * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable\n   */\n  @Cordova()\n  isDnsLive(ip: string): Promise<boolean> { return; }\n\n  /**\n   * Checks if IP is live using socket And PORT\n   *\n   * @param {string}        ip  - IP Address you want to test\n   *\n   * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable\n   */\n  @Cordova()\n  isPortLive(ip: string): Promise<boolean> { return; }\n\n  /**\n   * Checks if device is rooted\n   *\n   * @returns {Promise<boolean>} - A Promise for whether the device is rooted\n   */\n  @Cordova()\n  isRooted(): Promise<boolean> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}