{"version":3,"sources":["../../../src/@ionic-native/plugins/zeroconf/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AACxE,8CAA6C;AAkB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AASH,IAAa,QAAQ;IAAS,4BAAiB;IAA/C;;IAuEA,CAAC;IAtEC;;;OAGG;IAEH,8BAAW,GAAX,cAAiC,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;;;;;OAQG;IAEH,2BAAQ,GAAR,UAAS,IAAY,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAc,IAA6B,MAAM,CAAC,CAAC,CAAC;IAEvH;;;;;;OAMG;IAEH,6BAAU,GAAV,UAAW,IAAY,EAAE,MAAc,EAAE,IAAY,IAAmB,MAAM,CAAC,CAAC,CAAC;IAEjF;;;OAGG;IAEH,uBAAI,GAAJ,cAAwB,MAAM,CAAC,CAAC,CAAC;IAEjC;;;;;OAKG;IAMH,wBAAK,GAAL,UAAM,IAAY,EAAE,MAAc,IAAgC,MAAM,CAAC,CAAC,CAAC;IAE3E;;;;;OAKG;IAEH,0BAAO,GAAP,UAAQ,IAAY,EAAE,MAAc,IAAmB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;OAGG;IAEH,wBAAK,GAAL,cAAyB,MAAM,CAAC,CAAC,CAAC;IAOpC,eAAC;AAAD,CAvEA,AAuEC,CAvE6B,wBAAiB,GAuE9C;AANM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAhEA;IADC,cAAO,EAAE;;;;2CACgC;AAY1C;IADC,cAAO,EAAE;;;;wCAC6G;AAUvH;IADC,cAAO,EAAE;;;;0CACuE;AAOjF;IADC,cAAO,EAAE;;;;oCACuB;AAajC;IALC,cAAO,CAAC;QACP,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,SAAS;QACxB,aAAa,EAAE,IAAI;KACpB,CAAC;;;oCACmC,uBAAU;qCAA4B;AAS3E;IADC,cAAO,EAAE;;;;uCACsD;AAOhE;IADC,cAAO,EAAE;;;;qCACwB;AAhEvB,QAAQ;IARpB,aAAM,CAAC;QACN,UAAU,EAAE,UAAU;QACtB,MAAM,EAAE,yBAAyB;QACjC,SAAS,EAAE,0BAA0B;QACrC,IAAI,EAAE,oDAAoD;QAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,QAAQ,CAuEpB;AAvEY,4BAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface ZeroconfService {\n  domain: string;\n  type: string;\n  name: string;\n  port: number;\n  hostname: string;\n  ipv4Addresses: Array<string>;\n  ipv6Addresses: Array<string>;\n  txtRecord: any;\n}\n\nexport interface ZeroconfResult {\n  action: 'registered' | 'added' | 'removed';\n  service: ZeroconfService;\n}\n\n/**\n * @name Zeroconf\n * @description\n * This plugin allows you to browse and publish Zeroconf/Bonjour/mDNS services.\n * @usage\n * ```typescript\n * import { Zeroconf } from '@ionic-native/zeroconf';\n *\n * constructor(private zeroconf: Zeroconf) { }\n *\n * ...\n *\n * // watch for services of a specified type\n * this.zeroconf.watch('_http._tcp.', 'local.').subscribe(result => {\n *   if (result.action == 'added') {\n *     console.log('service added', result.service);\n *   } else {\n *     console.log('service removed', result.service);\n *   }\n * });\n *\n * // publish a zeroconf service of your own\n * this.zeroconf.register('_http._tcp.', 'local.', 'Becvert\\'s iPad', 80, {\n *   'foo': 'bar'\n * }).then(result => {\n *   console.log('Service registered', result.service);\n * });\n *\n *\n * // unregister your service\n * this.zeroconf.unregister('_http._tcp.', 'local.', 'Becvert\\'s iPad');\n * ```\n */\n@Plugin({\n  pluginName: 'Zeroconf',\n  plugin: 'cordova-plugin-zeroconf',\n  pluginRef: 'cordova.plugins.zeroconf',\n  repo: 'https://github.com/becvert/cordova-plugin-zeroconf',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Zeroconf extends IonicNativePlugin {\n  /**\n   * Returns this device's hostname.\n   * @return {Promise<string>}\n   */\n  @Cordova()\n  getHostname(): Promise<string> { return; }\n\n  /**\n   * Publishes a new service.\n   * @param type {string} Service type name, e.g. \"_http._tcp\".\n   * @param domain {string} Domain scope of the service, typically \"local.\".\n   * @param name {string} Unqualified service instance name.\n   * @param port {number} Local port on which the service runs.\n   * @param txtRecord {any} Arbitrary key/value pairs describing the service.\n   * @return {Promise<ZeroconfResult>} Returns a Promise that resolves with the registered service.\n   */\n  @Cordova()\n  register(type: string, domain: string, name: string, port: number, txtRecord: any): Promise<ZeroconfResult> { return; }\n\n  /**\n   * Unregisters a service.\n   * @param type {string} Service type name, e.g. \"_http._tcp\".\n   * @param domain {string} Domain scope of the service, typically \"local.\".\n   * @param name {string} Unqualified service instance name.\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  unregister(type: string, domain: string, name: string): Promise<void> { return; }\n\n  /**\n   * Unregisters all published services.\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  stop(): Promise<void> { return; }\n\n  /**\n   * Starts watching for services of the specified type.\n   * @param type {string} Service type name, e.g. \"_http._tcp\".\n   * @param domain {string} Domain scope of the service, typically \"local.\".\n   * @return {Observable<ZeroconfResult>} Returns an Observable that notifies of each service added or removed.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'unwatch',\n    clearWithArgs: true\n  })\n  watch(type: string, domain: string): Observable<ZeroconfResult> { return; }\n\n  /**\n   * Stops watching for services of the specified type.\n   * @param type {string} Service type name, e.g. \"_http._tcp\".\n   * @param domain {string} Domain scope of the service, typically \"local.\".\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  unwatch(type: string, domain: string): Promise<void> { return; }\n\n  /**\n   * Closes the service browser and stops watching.\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  close(): Promise<void> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}