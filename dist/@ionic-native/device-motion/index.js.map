{"version":3,"sources":["../../../src/@ionic-native/plugins/device-motion/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AACxE,8CAA6C;AAmC7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AASH,IAAa,YAAY;IAAS,gCAAiB;IAAnD;;IA2BA,CAAC;IAzBC;;;OAGG;IAEH,6CAAsB,GAAtB,cAAkE,MAAM,CAAC,CAAC,CAAC;IAE3E;;;;OAIG;IAMH,wCAAiB,GAAjB,UAAkB,OAA0C,IAA8C,MAAM,CAAC,CAAC,CAAC;IAQrH,mBAAC;AAAD,CA3BA,AA2BC,CA3BiC,wBAAiB,GA2BlD;AANM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAnBA;IADC,cAAO,EAAE;;;;0DACiE;AAY3E;IALC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;QACxB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,YAAY;KAC5B,CAAC;;;oCAC6D,uBAAU;qDAA0C;AAnBxG,YAAY;IARxB,aAAM,CAAC;QACN,UAAU,EAAE,cAAc;QAC1B,MAAM,EAAE,8BAA8B;QACtC,SAAS,EAAE,yBAAyB;QACpC,IAAI,EAAE,wDAAwD;QAC9D,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,iBAAiB,CAAC;KACzH,CAAC;GAEW,YAAY,CA2BxB;AA3BY,oCAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface DeviceMotionAccelerationData {\n\n  /**\n   * Amount of acceleration on the x-axis. (in m/s^2)\n   */\n  x: number;\n\n  /**\n   * Amount of acceleration on the y-axis. (in m/s^2)\n   */\n  y: number;\n\n  /**\n   * Amount of acceleration on the z-axis. (in m/s^2)\n   */\n  z: number;\n\n  /**\n   * Creation timestamp in milliseconds.\n   */\n  timestamp: any;\n\n}\n\nexport interface DeviceMotionAccelerometerOptions {\n\n  /**\n   * Requested period of calls to accelerometerSuccess with acceleration data in Milliseconds. Default: 10000\n   */\n  frequency?: number;\n\n}\n\n/**\n * @name Device Motion\n * @description\n * Requires Cordova plugin: `cordova-plugin-device-motion`. For more info, please see the [Device Motion docs](https://github.com/apache/cordova-plugin-device-motion).\n *\n * @usage\n * ```typescript\n * import { DeviceMotion, DeviceMotionAccelerationData } from '@ionic-native/device-motion';\n *\n * constructor(private deviceMotion: DeviceMotion) { }\n *\n * ...\n *\n * // Get the device current acceleration\n * this.deviceMotion.getCurrentAcceleration().then(\n *   (acceleration: DeviceMotionAccelerationData) => console.log(acceleration),\n *   (error: any) => console.log(error)\n * );\n *\n * // Watch device acceleration\n * var subscription = this.deviceMotion.watchAcceleration().subscribe((acceleration: DeviceMotionAccelerationData) => {\n *   console.log(acceleration);\n * });\n *\n * // Stop watch\n * subscription.unsubscribe();\n *\n * ```\n * @interfaces\n * DeviceMotionAccelerationData\n * DeviceMotionAccelerometerOptions\n */\n@Plugin({\n  pluginName: 'DeviceMotion',\n  plugin: 'cordova-plugin-device-motion',\n  pluginRef: 'navigator.accelerometer',\n  repo: 'https://github.com/apache/cordova-plugin-device-motion',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone 8']\n})\n\nexport class DeviceMotion extends IonicNativePlugin {\n\n  /**\n   * Get the current acceleration along the x, y, and z axes.\n   * @returns {Promise<DeviceMotionAccelerationData>} Returns object with x, y, z, and timestamp properties\n   */\n  @Cordova()\n  getCurrentAcceleration(): Promise<DeviceMotionAccelerationData> { return; }\n\n  /**\n   * Watch the device acceleration. Clear the watch by unsubscribing from the observable.\n   * @param {AccelerometerOptions} options list of options for the accelerometer.\n   * @returns {Observable<DeviceMotionAccelerationData>} Observable returns an observable that you can subscribe to\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true,\n    clearFunction: 'clearWatch'\n  })\n  watchAcceleration(options?: DeviceMotionAccelerometerOptions): Observable<DeviceMotionAccelerationData> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}