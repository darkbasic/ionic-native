{"version":3,"sources":["../../../src/@ionic-native/plugins/web-intent/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAyF;AACzF,8CAA6C;AAE7C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH,IAAa,SAAS;IAAS,6BAAiB;IAAhD;;IAqKA,CAAC;IA5FC;;;;OAIG;IAEH,iCAAa,GAAb,UAAc,OAAoD,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7F;;;;OAIG;IAEH,0CAAsB,GAAtB,UAAuB,OAAoD,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtG;;;;OAIG;IAEH,4BAAQ,GAAR,UAAS,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjD;;;;OAIG;IAEH,4BAAQ,GAAR,UAAS,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjD;;;OAGG;IAEH,0BAAM,GAAN,cAA4B,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAEtC;;OAEG;IAIH,+BAAW,GAAX,cAAoC,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAE9C;;;;OAIG;IAEH,iCAAa,GAAb,UAAc,OAAyD,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElG;;;OAGG;IAEH,6CAAyB,GAAzB,UAA0B,OAAY,IAAU,CAAC;IAEjD;;OAEG;IAEH,+CAA2B,GAA3B,cAAsC,CAAC;IAEvC;;MAEE;IAEF,4BAAQ,GAAR,cAAmB,CAAC;IAEpB;;MAEE;IAEF,oCAAgB,GAAhB,cAA2B,CAAC;IAE5B;;OAEG;IAEH,6BAAS,GAAT,cAA4B,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAQxC,gBAAC;AAAD,CArKA,AAqKC,CArK8B,wBAAiB,GAqK/C;AANM,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA7JA;IADC,sBAAe;;8CACI;AAOpB;IADC,sBAAe;;8CACI;AAOpB;IADC,sBAAe;;6CACG;AAOnB;IADC,sBAAe;;gDACM;AAOtB;IADC,sBAAe;;+CACK;AAOrB;IADC,sBAAe;;8CACI;AAOpB;IADC,sBAAe;;8CACI;AAOpB;IADC,sBAAe;;gDACM;AAOtB;IADC,sBAAe;;qDACW;AAO3B;IADC,sBAAe;;8CACI;AASpB;IADC,cAAO,EAAE;;;;8CACmF;AAQ7F;IADC,cAAO,EAAE;;;;uDAC4F;AAQtG;IADC,cAAO,EAAE;;;;yCACuC;AAQjD;IADC,cAAO,EAAE;;;;yCACuC;AAOjD;IADC,cAAO,EAAE;;;;uCAC2B;AAQrC;IAHC,cAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACa,uBAAU;4CAAoB;AAQ7C;IADC,cAAO,EAAE;;;;8CACwF;AAOlG;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;0DACyB;AAMjD;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;4DACe;AAMvC;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;yCACJ;AAMpB;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;iDACI;AAM5B;IADC,cAAO,EAAE;;;;0CAC2B;AA7J1B,SAAS;IARrB,aAAM,CAAC;QACN,UAAU,EAAE,WAAW;QACvB,MAAM,EAAE,0CAA0C;QAClD,SAAS,EAAE,YAAY;QACvB,IAAI,EAAE,wEAAwE;QAC9E,SAAS,EAAE,CAAC,SAAS,CAAC;KACvB,CAAC;GAEW,SAAS,CAqKrB;AArKY,8BAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @beta\n * @name Web Intent\n * @description\n * @usage\n * For usage information please refer to the plugin's Github repo.\n *\n * ```typescript\n * import { WebIntent } from '@ionic-native/web-intent';\n *\n * constructor(private webIntent: WebIntent) { }\n *\n * ...\n *\n * const options = {\n *   action: this.webIntent.ACTION_VIEW,\n *   url: 'path/to/file',\n *   type: 'application/vnd.android.package-archive'\n * };\n *\n * this.webIntent.startActivity(options).then(onSuccess, onError);\n *\n * ```\n */\n@Plugin({\n  pluginName: 'WebIntent',\n  plugin: 'com-darryncampbell-cordova-plugin-intent',\n  pluginRef: 'intentShim',\n  repo: 'https://github.com/darryncampbell/darryncampbell-cordova-plugin-intent',\n  platforms: ['Android']\n})\n\nexport class WebIntent extends IonicNativePlugin {\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_SEND: string;\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_VIEW: string;\n\n  /**\n   * Convenience constant for extras\n   * @type {string}\n   */\n  @CordovaProperty\n  EXTRA_TEXT: string;\n\n  /**\n   * Convenience constant for extras\n   * @type {string}\n   */\n  @CordovaProperty\n  EXTRA_SUBJECT: string;\n\n  /**\n   * Convenience constant for extras\n   * @type {string}\n   */\n  @CordovaProperty\n  EXTRA_STREAM: string;\n\n  /**\n   * Convenience constant for extras\n   * @type {string}\n   */\n  @CordovaProperty\n  EXTRA_EMAIL: string;\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_CALL: string;\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_SENDTO: string;\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_GET_CONTENT: string;\n\n  /**\n   * Convenience constant for actions\n   * @type {string}\n   */\n  @CordovaProperty\n  ACTION_PICK: string;\n\n\n  /**\n   * Launches an Android intent\n   * @param options {Object} { action: any, url: string, type?: string }\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  startActivity(options: { action: any, url: string, type?: string }): Promise<any> { return; }\n\n  /**\n   * Starts a new activity and return the result to the application\n   * @param options {Object} { action: any, url: string, type?: string }\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  startActivityForResult(options: { action: any, url: string, type?: string }): Promise<any> { return; }\n\n  /**\n   * Checks if this app was invoked with specified extra\n   * @param extra {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  hasExtra(extra: string): Promise<any> { return; }\n\n  /**\n   * Gets the extra that this app was invoked with\n   * @param extra {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getExtra(extra: string): Promise<any> { return; }\n\n  /**\n   * Gets the Uri the app was invoked with\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getUri(): Promise<string> { return; };\n\n  /**\n   * @returns {Observable<string>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onNewIntent(): Observable<string> { return; };\n\n  /**\n   * Sends a custom intent passing optional extras\n   * @param options {Object} { action: string, extras?: { option: boolean } }\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  sendBroadcast(options: { action: string, extras?: { option: boolean } }): Promise<any> { return; }\n\n  /**\n   * Registers a broadcast receiver for the specified filters\n   * @param filters {any}\n   */\n  @Cordova({ sync: true })\n  registerBroadcastReceiver(filters: any): void { }\n\n  /**\n   * Unregisters a broadcast receiver\n   */\n  @Cordova({ sync: true })\n  unregisterBroadcastReceiver(): void { }\n\n  /**\n  * Returns the content of the intent used whenever the application activity is launched\n  */\n  @Cordova({ sync: true })\n  onIntent(): void { }\n\n  /**\n  *\n  */\n  @Cordova({ sync: true })\n  onActivityResult(): void { }\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getIntent(): Promise<any> { return; };\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}