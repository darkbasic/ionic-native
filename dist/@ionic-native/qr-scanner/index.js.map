{"version":3,"sources":["../../../src/@ionic-native/plugins/qr-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,sCAA2C;AAC3C,8CAA6C;AA0D7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AASH,IAAa,SAAS;IAAS,6BAAiB;IAAhD;;IAqHA,CAAC;IAnHC;;;OAGG;IAIH,2BAAO,GAAP,cAAsC,MAAM,CAAC,CAAC,CAAC;IAE/C;;;OAGG;IAMH,wBAAI,GAAJ,cAA6B,MAAM,CAAC,CAAC,CAAC;IAEtC;;;OAGG;IAEH,wBAAI,GAAJ,cAAmC,MAAM,CAAC,CAAC,CAAC;IAE5C;;;OAGG;IAEH,wBAAI,GAAJ,cAAmC,MAAM,CAAC,CAAC,CAAC;IAE5C;;;OAGG;IAIH,+BAAW,GAAX,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;OAGG;IAIH,gCAAY,GAAZ,cAA2C,MAAM,CAAC,CAAC,CAAC;IAEpD;;;OAGG;IAIH,kCAAc,GAAd,cAA6C,MAAM,CAAC,CAAC,CAAC;IAEtD;;;OAGG;IAIH,iCAAa,GAAb,cAA4C,MAAM,CAAC,CAAC,CAAC;IAErD;;;;OAIG;IAIH,6BAAS,GAAT,UAAU,MAAc,IAA8B,MAAM,CAAC,CAAC,CAAC;IAE/D;;;OAGG;IAEH,gCAAY,GAAZ,cAA2C,MAAM,CAAC,CAAC,CAAC;IAEpD;;;OAGG;IAEH,iCAAa,GAAb,cAA4C,MAAM,CAAC,CAAC,CAAC;IAErD;;;OAGG;IAEH,6BAAS,GAAT,cAAwC,MAAM,CAAC,CAAC,CAAC;IAEjD;;OAEG;IAIH,gCAAY,GAAZ,cAAsB,CAAC;IAQzB,gBAAC;AAAD,CArHA,AAqHC,CArH8B,wBAAiB,GAqH/C;AANM,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3GA;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;wCAC6C;AAW/C;IALC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;QACrB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,YAAY;KAC5B,CAAC;;;oCACM,uBAAU;qCAAoB;AAOtC;IADC,cAAO,EAAE;;;;qCACkC;AAO5C;IADC,cAAO,EAAE;;;;qCACkC;AAS5C;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;4CACiD;AASnD;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;6CACkD;AASpD;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;+CACoD;AAStD;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;8CACmD;AAUrD;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,MAAM;KACtB,CAAC;;;;0CAC6D;AAO/D;IADC,cAAO,EAAE;;;;6CAC0C;AAOpD;IADC,cAAO,EAAE;;;;8CAC2C;AAOrD;IADC,cAAO,EAAE;;;;0CACuC;AAQjD;IAHC,cAAO,CAAC;QACP,IAAI,EAAE,IAAI;KACX,CAAC;;;;6CACqB;AA7GZ,SAAS;IARrB,aAAM,CAAC;QACN,UAAU,EAAE,WAAW;QACvB,MAAM,EAAE,0BAA0B;QAClC,SAAS,EAAE,WAAW;QACtB,IAAI,EAAE,oDAAoD;QAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACpD,CAAC;GAEW,SAAS,CAqHrB;AArHY,8BAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, IonicNativePlugin, Cordova } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface QRScannerStatus {\n  /**\n   * On iOS and Android 6.0+, camera access is granted at runtime by the user (by clicking \"Allow\" at the dialog).\n   * The authorized property is a boolean value which is true only when the user has allowed camera access to your app (AVAuthorizationStatus.Authorized).\n   * On platforms with permissions granted at install (Android pre-6.0, Windows Phone) this property is always true.\n   */\n  authorized: boolean;\n  /**\n   * A boolean value which is true if the user permanently denied camera access to the app (AVAuthorizationStatus.Denied).\n   * Once denied, camera access can only be gained by requesting the user change their decision (consider offering a link to the setting via openSettings()).\n   */\n  denied: boolean;\n  /**\n   * A boolean value which is true if the user is unable to grant permissions due to parental controls, organization security configuration profiles, or similar reasons.\n   */\n  restricted: boolean;\n  /**\n   * A boolean value which is true if QRScanner is prepared to capture video and render it to the view.\n   */\n  prepared: boolean;\n  /**\n   * A boolean value which is true when the preview layer is visible (and on all platforms but browser, the native webview background is transparent).\n   */\n  showing: boolean;\n  /**\n   * A boolean value which is true if QRScanner is actively scanning for a QR code.\n   */\n  scanning: boolean;\n  /**\n   * A boolean value which is true if QRScanner is displaying a live preview from the device's camera. Set to false when the preview is paused.\n   */\n  previewing: boolean;\n  /**\n   * A boolean value which is true if the light is enabled.\n   */\n  lightEnabled: boolean;\n  /**\n   * A boolean value which is true only if the users' operating system is able to QRScanner.openSettings().\n   */\n  canOpenSettings: boolean;\n  /**\n   * A boolean value which is true only if the users' device can enable a light in the direction of the currentCamera.\n   */\n  canEnableLight: boolean;\n  /**\n   * A boolean value which is true only if the current device \"should\" have a front camera.\n   * The camera may still not be capturable, which would emit error code 3, 4, or 5 when the switch is attempted.\n   * (On the browser platform, this value is false until the prepare method is called.)\n   */\n  canChangeCamera: boolean;\n  /**\n   * A number representing the index of the currentCamera. 0 is the back camera, 1 is the front.\n   */\n  currentCamera: number;\n}\n\n/**\n * @name QR Scanner\n * @description\n *\n * @usage\n * ```typescript\n * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner';\n *\n *\n * constructor(private qrScanner: QRScanner) { }\n *\n * ...\n *\n * // Optionally request the permission early\n * this.qrScanner.prepare()\n *   .then((status: QRScannerStatus) => {\n *      if (status.authorized) {\n *        // camera permission was granted\n *\n *\n *        // start scanning\n *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n *          console.log('Scanned something', text);\n *\n *          this.qrScanner.hide(); // hide camera preview\n *          scanSub.unsubscribe(); // stop scanning\n *        });\n *\n *        // show camera preview\n *        this.qrScanner.show();\n *\n *        // wait for user to scan something, then the observable callback will be called\n *\n *      } else if (status.denied) {\n *        // camera permission was permanently denied\n *        // you must use QRScanner.openSettings() method to guide the user to the settings page\n *        // then they can grant the permission from there\n *      } else {\n *        // permission was denied, but not permanently. You can ask for permission again at a later time.\n *      }\n *   })\n *   .catch((e: any) => console.log('Error is', e));\n *\n *\n * ```\n * @interfaces\n * QRScannerStatus\n */\n@Plugin({\n  pluginName: 'QRScanner',\n  plugin: 'cordova-plugin-qrscanner',\n  pluginRef: 'QRScanner',\n  repo: 'https://github.com/bitpay/cordova-plugin-qrscanner',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class QRScanner extends IonicNativePlugin {\n\n  /**\n   * Request permission to use QR scanner.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  prepare(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n   * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n   */\n  @Cordova({\n    callbackStyle: 'node',\n    observable: true,\n    clearFunction: 'cancelScan'\n  })\n  scan(): Observable<string> { return; }\n\n  /**\n   * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  show(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Configures the native webview to be opaque with a white background, covering the video preview.\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  hide(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Enable the device's light (for scanning in low-light environments).\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  enableLight(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Disable the device's light.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  disableLight(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Use front camera\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  useFrontCamera(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Use back camera\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  useBackCamera(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Set camera to be used.\n   * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  useCamera(camera: number): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Pauses the video preview on the current frame and pauses scanning.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  pausePreview(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Resumse the video preview and resumes scanning.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  resumePreview(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Returns permission status\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  getStatus(): Promise<QRScannerStatus> { return; }\n\n  /**\n   * Opens settings to edit app permissions.\n   */\n  @Cordova({\n    sync: true\n  })\n  openSettings(): void {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}