{"version":3,"sources":["../../../src/@ionic-native/plugins/keychain-touch-id/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AAExE;;;;;;;;;;;;;;;;;;;;;GAqBG;AASH,IAAa,eAAe;IAAS,mCAAiB;IAAtD;;IA4DA,CAAC;IA1DC;;;OAGG;IAEH,qCAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,8BAAI,GAAJ,UAAK,GAAW,EAAE,QAAgB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7D;;;;;;OAMG;IAEH,gCAAM,GAAN,UAAO,GAAW,EAAE,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9D;;;;OAIG;IAEH,6BAAG,GAAH,UAAI,GAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;OAIG;IAEH,gCAAM,GAAN,UAAO,GAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7C;;;OAGG;IAEH,mCAAS,GAAT,UAAU,MAAc,IAAS,CAAC;IAQpC,sBAAC;AAAD,CA5DA,AA4DC,CA5DoC,wBAAiB,GA4DrD;AANM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AApDA;IADC,cAAO,EAAE;;;;kDAGT;AAUD;IADC,cAAO,EAAE;;;;2CACmD;AAU7D;IADC,cAAO,EAAE;;;;6CACoD;AAQ9D;IADC,cAAO,EAAE;;;;0CACgC;AAQ1C;IADC,cAAO,EAAE;;;;6CACmC;AAO7C;IADC,cAAO,EAAE;;;;gDACwB;AApDvB,eAAe;IAR3B,aAAM,CAAC;QACN,UAAU,EAAE,iBAAiB;QAC7B,MAAM,EAAE,kCAAkC;QAC1C,SAAS,EAAE,iBAAiB;QAC5B,IAAI,EAAE,+DAA+D;QACrE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,eAAe,CA4D3B;AA5DY,0CAAe","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Keychain Touch Id\n * @description\n * A cordova plugin adding the iOS TouchID / Android fingerprint to your\n * app and allowing you to store a password securely in the device keychain.\n *\n * @usage\n * ```typescript\n * import { KeychainTouchId } from '@ionic-native/keychain-touch-id';\n *\n *\n * constructor(private keychainTouchId: KeychainTouchId) { }\n *\n * ...\n *\n *\n * this.keychainTouchId.isAvailable()\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'KeychainTouchId',\n  plugin: 'cordova-plugin-keychain-touch-id',\n  pluginRef: 'plugins.touchid',\n  repo: 'https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id',\n  platforms: ['Android', 'iOS']\n})\n\nexport class KeychainTouchId extends IonicNativePlugin {\n\n  /**\n   * Check if Touch ID / Fingerprint is supported by the device\n   * @return {Promise<any>} Returns a promise that resolves when there is hardware support\n   */\n  @Cordova()\n  isAvailable(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Encrypts and Saves a password under the key in the device keychain, which can be retrieved after\n   * successful authentication using fingerprint\n   * @param key {string} the key you want to store\n   * @param password {string} the password you want to encrypt and store\n   * @return {Promise<any>} Returns a promise that resolves when there is a result\n   */\n  @Cordova()\n  save(key: string, password: string): Promise<any> { return; }\n\n  /**\n   * Opens the fingerprint dialog, for the given key, showing an additional message. Promise will resolve\n   * with the password stored in keychain or will resolve an error code, where -1 indicated not available.\n   * @param key {string} the key you want to retrieve from keychain\n   * @param message {string} a message to the user\n   * @return {Promise<any>} Returns a promise that resolves when the key value is successfully retrieved or an error\n   */\n  @Cordova()\n  verify(key: string, message: string): Promise<any> { return; }\n\n  /**\n   * Checks if there is a password stored within the keychain for the given key.\n   * @param key {string} the key you want to check from keychain\n   * @return {Promise<any>} Returns a promise that resolves with success if the key is available or failure if key is not.\n   */\n  @Cordova()\n  has(key: string): Promise<any> { return; }\n\n  /**\n   * Deletes the password stored under given key from the keychain.\n   * @param key {string} the key you want to delete from keychain\n   * @return {Promise<any>} Returns a promise that resolves with success if the key is deleted or failure if key is not\n   */\n  @Cordova()\n  delete(key: string): Promise<any> { return; }\n\n  /**\n   * Sets the language of the fingerprint dialog\n   * @param locale {string} locale subtag from [this list](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).\n   */\n  @Cordova()\n  setLocale(locale: string): void {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}