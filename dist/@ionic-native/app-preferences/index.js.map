{"version":3,"sources":["../../../src/@ionic-native/plugins/app-preferences/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,8CAA6C;AAC7C,sCAA2C;AAE3C;;;;;;;;;;;;;;;;;GAiBG;AASH,IAAa,cAAc;IAAS,kCAAiB;IAArD;;IAqHA,CAAC;IAnHC;;;;;;OAMG;IAIH,8BAAK,GAAL,UAAM,IAAY,EAAE,GAAY,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE3D;;;;;;;OAOG;IAIH,8BAAK,GAAL,UAAM,IAAY,EAAE,GAAW,EAAE,KAAW;QAC1C,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAIH,+BAAM,GAAN,UAAO,IAAY,EAAE,GAAY,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE5D;;;;OAIG;IAIH,iCAAQ,GAAR,cAA2B,MAAM,CAAC,CAAC,CAAC;IAEpC;;;;OAIG;IAIH,6BAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;;OAKG;IAIH,8BAAK,GAAL,UAAM,SAAkB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;;;;OAMG;IAKH,8BAAK,GAAL,UAAM,SAAiB,IAAS,MAAM,CAAC,CAAC,CAAC;IAMzC,iCAAQ,GAAR,UAAS,SAAiB,IAAS,MAAM,CAAC,CAAC,CAAC;IAE5C;;;;OAIG;IAIH,kCAAS,GAAT,cAAsB,MAAM,CAAC,CAAC,CAAC;IAE/B;;;;OAIG;IAIH,iCAAQ,GAAR,cAAqB,MAAM,CAAC,CAAC,CAAC;IAQhC,qBAAC;AAAD,CArHA,AAqHC,CArHmC,wBAAiB,GAqHpD;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAxGA;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;2CACyD;AAa3D;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;2CAGD;AAYD;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;4CAC0D;AAU5D;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;8CACkC;AAUpC;IAHC,cAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;0CAC8B;AAWhC;IAHC,cAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACyB,uBAAU;2CAAiB;AAatD;IAJC,cAAO,CAAC;QACP,SAAS,EAAE,CAAC,SAAS,CAAC;QACtB,IAAI,EAAE,IAAI;KACX,CAAC;;;;2CACuC;AAMzC;IAJC,cAAO,CAAC;QACP,SAAS,EAAE,CAAC,KAAK,CAAC;QAClB,IAAI,EAAE,IAAI;KACX,CAAC;;;;8CAC0C;AAU5C;IAHC,cAAO,CAAC;QACP,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;KACjD,CAAC;;;oCACW,MAAM;+CAAY;AAU/B;IAHC,cAAO,CAAC;QACP,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;KACjD,CAAC;;;oCACU,MAAM;8CAAY;AA7GnB,cAAc;IAR1B,aAAM,CAAC;QACN,UAAU,EAAE,gBAAgB;QAC5B,MAAM,EAAE,gCAAgC;QACxC,SAAS,EAAE,wBAAwB;QACnC,IAAI,EAAE,yDAAyD;QAC/D,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,eAAe,CAAC;KACjG,CAAC;GAEW,cAAc,CAqH1B;AArHY,wCAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name App Preferences\n * @description\n * This plugin allows you to read and write app preferences\n *\n * @usage\n * ```typescript\n * import { AppPreferences } from '@ionic-native/app-preferences';\n *\n * constructor(private appPreferences: AppPreferences) { }\n *\n * ...\n *\n * this.appPreferences.fetch('key').then((res) => { console.log(res); });\n *\n * ```\n *\n */\n@Plugin({\n  pluginName: 'AppPreferences',\n  plugin: 'cordova-plugin-app-preferences',\n  pluginRef: 'plugins.appPreferences',\n  repo: 'https://github.com/apla/me.apla.cordova.app-preferences',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'macOS', 'Windows 8', 'Windows Phone']\n})\n\nexport class AppPreferences extends IonicNativePlugin {\n\n  /**\n   * Get a preference value\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  fetch(dict: string, key?: string): Promise<any> { return; }\n\n  /**\n   * Set a preference value\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @param {any} value Value\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  store(dict: string, key: string, value?: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Remove value from preferences\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  remove(dict: string, key?: string): Promise<any> { return; }\n\n  /**\n   * Clear preferences\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  clearAll(): Promise<any> { return; }\n\n  /**\n   * Show native preferences interface\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  show(): Promise<any> { return; }\n\n  /**\n   * Show native preferences interface\n   *\n   * @param {boolean} subscribe true value to subscribe, false - unsubscribe\n   * @return {Observable<any>} Returns an observable\n   */\n  @Cordova({\n    observable: true\n  })\n  watch(subscribe: boolean): Observable<any> { return; }\n\n  /**\n   * Return named configuration context\n   * In iOS you'll get a suite configuration, on Android â€” named file\n   * Supports: Android, iOS\n   * @param {string} suiteName suite name\n   * @returns {Object} Custom object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  suite(suiteName: string): any { return; }\n\n  @Cordova({\n    platforms: ['iOS'],\n    sync: true\n  })\n  iosSuite(suiteName: string): any { return; }\n\n  /**\n   * Return cloud synchronized configuration context\n   * Currently supports Windows and iOS/macOS\n   * @returns {Object} Custom object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['iOS', 'Windows', 'Windows Phone 8']\n  })\n  cloudSync(): Object { return; }\n\n  /**\n   * Return default configuration context\n   * Currently supports Windows and iOS/macOS\n   * @returns {Object} Custom Object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['iOS', 'Windows', 'Windows Phone 8']\n  })\n  defaults(): Object { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}