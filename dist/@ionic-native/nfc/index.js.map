{"version":3,"sources":["../../../src/@ionic-native/plugins/nfc/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\ndeclare let window: any;\n/**\n * @name NFC\n * @description\n * The NFC plugin allows you to read and write NFC tags. You can also beam to, and receive from, other NFC enabled devices.\n *\n * Use to\n * - read data from NFC tags\n * - write data to NFC tags\n * - send data to other NFC enabled devices\n * - receive data from NFC devices\n *\n * This plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty between NFC devices, tag types, and operating systems.\n *\n * @usage\n * ```typescript\n * import { NFC, Ndef } from '@ionic-native/nfc';\n *\n * constructor(private nfc: NFC, private ndef: Ndef) { }\n *\n * ...\n *\n * this.nfc.addNdefListener(() => {\n *   console.log('successfully attached ndef listener');\n * }, (err) => {\n *   console.log('error attaching ndef listener', err);\n * }).subscribe((event) => {\n *   console.log('received ndef message. the tag contains: ', event.tag);\n *   console.log('decoded tag id', this.nfc.bytesToHexString(event.tag.id));\n *\n *   let message = this.ndef.textRecord('Hello world');\n *   this.nfc.share([message]).then(onSuccess).catch(onError);\n * });\n *\n * ```\n */\n@Plugin({\n  pluginName: 'NFC',\n  plugin: 'phonegap-nfc',\n  pluginRef: 'nfc',\n  repo: 'https://github.com/chariotsolutions/phonegap-nfc',\n  platforms: ['Android', 'BlackBerry 10', 'Windows', 'Windows Phone 8']\n})\n/**\n*@{ NFC } class methods\n*/\n\nexport class NFC extends IonicNativePlugin {\n  /**\n   * Registers an event listener for any NDEF tag.\n   * @param onSuccess\n   * @param onFailure\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 3,\n    clearFunction: 'removeNdefListener',\n    clearWithArgs: true\n  })\n  addNdefListener(onSuccess?: Function, onFailure?: Function): Observable<any> { return; }\n\n  /**\n   * Registers an event listener for tags matching any tag type.\n   * @param onSuccess\n   * @param onFailure\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 3,\n    clearFunction: 'removeTagDiscoveredListener',\n    clearWithArgs: true\n  })\n  addTagDiscoveredListener(onSuccess?: Function, onFailure?: Function): Observable<any> { return; }\n\n  /**\n   * Registers an event listener for NDEF tags matching a specified MIME type.\n   * @param mimeType\n   * @param onSuccess\n   * @param onFailure\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 1,\n    errorIndex: 4,\n    clearFunction: 'removeMimeTypeListener',\n    clearWithArgs: true\n  })\n  addMimeTypeListener(mimeType: string, onSuccess?: Function, onFailure?: Function): Observable<any> { return; }\n\n  /**\n   * Registers an event listener for formatable NDEF tags.\n   * @param onSuccess\n   * @param onFailure\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 3\n  })\n  addNdefFormatableListener(onSuccess?: Function, onFailure?: Function): Observable<any> { return; }\n\n  /**\n   * Writes an NdefMessage(array of ndef records) to a NFC tag.\n   * @param message {any[]}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  write(message: any[]): Promise<any> { return; }\n  /**\n   * Makes a NFC tag read only. **Warning** this is permanent.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  makeReadyOnly(): Promise<any> { return; }\n\n  /**\n   * Shares an NDEF Message(array of ndef records) via peer-to-peer.\n   * @param message An array of NDEF Records.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  share(message: any[]): Promise<any> { return; }\n\n  /**\n   * Stop sharing NDEF data via peer-to-peer.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  unshare(): Promise<any> { return; }\n\n  /**\n   * Erase a NDEF tag\n   */\n  @Cordova()\n  erase(): Promise<any> { return; }\n\n  /**\n   * Send a file to another device via NFC handover.\n   * @param uris A URI as a String, or an array of URIs.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  handover(uris: string[]): Promise<any> { return; }\n\n  /**\n   * Stop sharing NDEF data via NFC handover.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopHandover(): Promise<any> { return; }\n\n  /**\n   * Opens the device's NFC settings.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  showSettings(): Promise<any> { return; }\n\n  /**\n   * Check if NFC is available and enabled on this device.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  enabled(): Promise<any> { return; }\n  /**\n  * @{ NFC } class utility methods\n  * for use with\n  */\n  /**\n   * Convert byte array to string\n   * @param bytes {number[]}\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  bytesToString(bytes: number[]): string { return; }\n  /**\n   * Convert string to byte array.\n   * @param str {string}\n   * @returns {number[]}\n   */\n  @Cordova({ sync: true })\n  stringToBytes(str: string): number[] { return; };\n  /**\n   * Convert byte array to hex string\n   *\n   * @param bytes {number[]}\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  bytesToHexString(bytes: number[]): string { return; };\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n/**\n * @hidden\n */\n@Plugin({\n  pluginName: 'NFC',\n  plugin: 'phonegap-nfc',\n  pluginRef: 'ndef'\n})\n/**\n*@{ Ndef } class methods\n*@description\n* Utility methods for creating ndef records for the ndef tag format.\n* Move records into array before usage. Then pass an array to methods as parameters.\n* Do not pass bytes as parameters for these methods, conversion is built in.\n* For usage with nfc.write() and nfc.share()\n*/\n\nexport class Ndef extends IonicNativePlugin {\n\n  @Cordova({ sync: true })\n  uriRecord(uri: string): any { return; }\n\n  @Cordova({ sync: true })\n  textRecord(text: string): any { return; }\n\n  @Cordova({ sync: true })\n  mimeMediaRecord(mimeType: string, payload: string): any { return; }\n\n  @Cordova({ sync: true })\n  androidApplicationRecord(packageName: string): any { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}