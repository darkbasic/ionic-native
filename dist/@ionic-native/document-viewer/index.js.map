{"version":3,"sources":["../../../src/@ionic-native/plugins/document-viewer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,sCAA2C;AA8B3C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH,IAAa,cAAc;IAAS,kCAAiB;IAArD;;IA4CA,CAAC;IA1CC;;;;OAIG;IAEH,uCAAc,GAAd,cAAiC,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;;;;;;;OAUG;IAEH,wCAAe,GAAf,UAAgB,GAAW,EAAE,WAAmB,EAAE,OAA8B,EAAE,UAAqB,EAAE,YAAuB,EAAE,YAAuB,EAAE,OAAkB,IAAU,CAAC;IAExL;;;;;;;;;;OAUG;IAEH,qCAAY,GAAZ,UAAa,GAAW,EAAE,WAAmB,EAAE,OAA8B,EAAE,MAAiB,EAAE,OAAkB,EAAE,YAAuB,EAAE,OAAkB,IAAU,CAAC;IAQ9K,qBAAC;AAAD,CA5CA,AA4CC,CA5CmC,wBAAiB,GA4CpD;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAnCA;IADC,cAAO,EAAE;;;;oDACgC;AAc1C;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;6DACuE,QAAQ,EAAiB,QAAQ,EAAiB,QAAQ,EAAY,QAAQ;;qDAAW;AAcxL;IADC,cAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;6DACgE,QAAQ,EAAY,QAAQ,EAAiB,QAAQ,EAAY,QAAQ;;kDAAW;AApCjK,cAAc;IAR1B,aAAM,CAAC;QACN,UAAU,EAAE,iBAAiB;QAC7B,MAAM,EAAE,gCAAgC;QACxC,SAAS,EAAE,0BAA0B;QACrC,IAAI,EAAE,8DAA8D;QACpE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACzC,CAAC;GAEW,cAAc,CA4C1B;AA5CY,wCAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface DocumentViewerOptions {\n  title?: string;\n  documentView?: {\n    closeLabel: string;\n  };\n  navigationView?: {\n    closeLabel: string;\n  };\n  email?: {\n    enabled: boolean;\n  };\n  print?: {\n    enabled: boolean;\n  };\n  openWith?: {\n    enabled: boolean;\n  };\n  bookmarks?: {\n    enabled: boolean;\n  };\n  search?: {\n    enabled: boolean;\n  };\n  autoClose?: {\n    onPause: boolean;\n  };\n}\n\n/**\n * @name Document Viewer\n * @description\n * This plugin offers a slim API to view PDF files which are either stored in the apps assets folder (/www/*) or in any other file system directory available via the cordova file plugin.\n *\n * @usage\n * ```typescript\n * import { DocumentViewer } from '@ionic-native/document-viewer';\n *\n *\n * constructor(private document: DocumentViewer) { }\n *\n * ...\n * const options: DocumentViewerOptions = {\n *   title: 'My PDF'\n * }\n *\n * this.document.viewDocument('assets/myFile.pdf', 'application/pdf', options)\n *\n * ```\n *\n * @interfaces\n * DocumentViewerOptions\n */\n@Plugin({\n  pluginName: 'Document Viewer',\n  plugin: 'cordova-plugin-document-viewer',\n  pluginRef: 'SitewaertsDocumentViewer',\n  repo: 'https://github.com/sitewaerts/cordova-plugin-document-viewer',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class DocumentViewer extends IonicNativePlugin {\n\n  /**\n   * Displays the email composer pre-filled with data.\n   *\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n   */\n  @Cordova()\n  getSupportInfo(): Promise<any> { return; }\n\n  /**\n   * Check if the document can be shown\n   *\n   * @param url {string} Url to the file\n   * @param contentType {string} Content type of the file\n   * @param options {Array<DocumentViewerOptions>} options\n   * @param [onPossible] {Function}\n   * @param [onMissingApp] {Function}\n   * @param [onImpossible] {Function}\n   * @param [onError] {Function}\n   */\n  @Cordova({ sync: true })\n  canViewDocument(url: string, contentType: string, options: DocumentViewerOptions, onPossible?: Function, onMissingApp?: Function, onImpossible?: Function, onError?: Function): void { }\n\n  /**\n   * Opens the file\n   *\n   * @param url {string} Url to the file\n   * @param contentType {string} Content type of the file\n   * @param options {DocumentViewerOptions} options\n   * @param [onShow] {Function}\n   * @param [onClose] {Function}\n   * @param [onMissingApp] {Function}\n   * @param [onError] {Function}\n   */\n  @Cordova({ sync: true })\n  viewDocument(url: string, contentType: string, options: DocumentViewerOptions, onShow?: Function, onClose?: Function, onMissingApp?: Function, onError?: Function): void { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}