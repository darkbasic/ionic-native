{"version":3,"sources":["../../../src/@ionic-native/plugins/mobile-accessibility/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name Mobile Accessibility\n * @description\n * This plugin exposes information on the status of various accessibility features of mobile operating systems, including, for example, whether a screen reader is running, invert colors is enabled, and the preferred scaling for text.\n * It also allows an application to send a string to be spoken by the screen reader, or a command to stop the screen reader from speaking.\n *\n * @usage\n * ```typescript\n * import { MobileAccessibility } from 'ionic-native';\n *\n *\n * constructor(private mobileAccessibility: MobileAccessibility) { }\n *\n * ...\n *\n * if(this.mobileAccessibility.isScreenReaderRunningCallback();\n *\n * ```\n */\n@Plugin({\n  pluginName: 'MobileAccessibility',\n  plugin: 'phonegap-plugin-mobile-accessibility',\n  pluginRef: 'MobileAccessibility',\n  repo: 'https://github.com/phonegap/phonegap-mobile-accessibility',\n  platforms: ['Android Fire OS', 'Android', 'iOS', 'Windows']\n})\n\nexport class MobileAccessibility extends IonicNativePlugin {\n\n  MobileAccessibilityNotifications: {\n    ANNOUNCEMENT: 'ANNOUNCEMENT',\n    BOLD_TEXT_STATUS_CHANGED: 'BOLD_TEXT_STATUS_CHANGED',\n    CLOSED_CAPTIONING_STATUS_CHANGED: 'CLOSED_CAPTIONING_STATUS_CHANGED',\n    DARKER_SYSTEM_COLORS_STATUS_CHANGED: 'DARKER_SYSTEM_COLORS_STATUS_CHANGED',\n    GRAYSCALE_STATUS_CHANGED: 'GRAYSCALE_STATUS_CHANGED',\n    GUIDED_ACCESS_STATUS_CHANGED: 'GUIDED_ACCESS_STATUS_CHANGED',\n    INVERT_COLORS_STATUS_CHANGED: 'INVERT_COLORS_STATUS_CHANGED',\n    LAYOUT_CHANGED: 'LAYOUT_CHANGED',\n    MONO_AUDIO_STATUS_CHANGED: 'MONO_AUDIO_STATUS_CHANGED',\n    PAGE_SCROLLED: 'PAGE_SCROLLED',\n    REDUCE_MOTION_STATUS_CHANGED: 'REDUCE_MOTION_STATUS_CHANGED',\n    REDUCE_TRANSPARENCY_STATUS_CHANGED: 'REDUCE_TRANSPARENCY_STATUS_CHANGED',\n    SCREEN_CHANGED: 'SCREEN_CHANGED',\n    SCREEN_READER_STATUS_CHANGED: 'SCREEN_READER_STATUS_CHANGED',\n    SPEAK_SCREEN_STATUS_CHANGED: 'SPEAK_SCREEN_STATUS_CHANGED',\n    SPEAK_SELECTION_STATUS_CHANGED: 'SPEAK_SELECTION_STATUS_CHANGED',\n    SWITCH_CONTROL_STATUS_CHANGED: 'SWITCH_CONTROL_STATUS_CHANGED',\n    TOUCH_EXPLORATION_STATUS_CHANGED: 'TOUCH_EXPLORATION_STATUS_CHANGED'\n  };\n\n  /**\n   * Makes an asynchronous call to native MobileAccessibility to determine if a screen reader is running.\n   * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova()\n  isScreenReaderRunning(): Promise<boolean> { return; }\n\n  /**\n   * An iOS-specific proxy for the MobileAccessibility.isScreenReaderRunning method\n   * @returns {Promise<boolean>} A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isVoiceOverRunningCallback(): Promise<boolean> { return; }\n\n  /**\n   * An Android/Amazon Fire OS-specific proxy for the MobileAccessibility.isScreenReaderRunning method.\n   * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isTalkBackRunningCallback(): Promise<boolean> { return; }\n\n  /**\n   * On Android, this method returns true if ChromeVox is active and properly initialized with access to the text to speech API in the WebView.\n   * If TalkBack is running but ChromeVox is not active, this method is useful to alert the user of a potential problem.\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isChromeVoxActive(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isBoldTextEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova()\n  isClosedCaptioningEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isDarkerSystemColorsEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isGrayscaleEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isGuidedAccessEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isInvertColorsEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isMonoAudioEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isReduceMotionEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isReduceTransparencyEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSpeakScreenEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSpeakSelectionEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  isSwitchControlRunningCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['Amazon Fire OS', 'Android'] })\n  isTouchExplorationEnabledCallback(): Promise<boolean> { return; }\n\n  /**\n   *\n   * * @returns {Promise<number>} Returns the result\n   */\n  @Cordova()\n  getTextZoomCallback(): Promise<number> { return; }\n\n  /**\n   * @param textZoom {number} A percentage value by which text in the WebView should be scaled.\n   */\n  @Cordova({ sync: true })\n  setTextZoom(textZoom: number): void { }\n\n  /**\n   *\n   */\n  @Cordova({ sync: true })\n  updateTextZoom(): void { }\n\n  /**\n   * A Boolean value which specifies whether to use the preferred text zoom of a default percent value of 100.\n   * @param value {boolean} Returns the result\n   */\n  @Cordova({ sync: true })\n  usePreferredTextZoom(value: boolean): void { }\n\n  /**\n   * Posts a notification with a string for the screen reader to announce if it is running.\n   * @param mobileAccessibilityNotification {any}\n   * @param value {string} A string to be announced by a screen reader.\n   * @returns {Promise<boolean>} Returns the result\n   */\n  @Cordova({ platforms: ['iOS'] })\n  postNotification(mobileAccessibilityNotification: any, value: string): Promise<boolean> { return; }\n\n  /**\n   * Speaks a given string through the screenreader. On Android, if ChromeVox is active, it will use the specified queueMode and properties.\n   * @param value {string}\n   * @param queueMode {mumber}\n   * @param properties {any}\n   */\n  @Cordova({ sync: true })\n  speak(value: string, queueMode?: number, properties?: any): void { }\n\n  /**\n   * Stops speech.\n   */\n  @Cordova({ sync: true })\n  stop(): void { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}