{"version":3,"sources":["../../../src/@ionic-native/plugins/power-management/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AACxE;;;;;;;;;;;;;;;;;;;GAmBG;AASH,IAAa,eAAe;IAAS,mCAAiB;IAAtD;;IAoCA,CAAC;IAnCC;;;OAGG;IAEH,iCAAO,GAAP,cAA0B,MAAM,CAAC,CAAC,CAAC;IAEnC;;;OAGG;IAEH,6BAAG,GAAH,cAAsB,MAAM,CAAC,CAAC,CAAC;IAE/B;;;OAGG;IAEH,iCAAO,GAAP,cAA0B,MAAM,CAAC,CAAC,CAAC;IAEnC;;;;;OAKG;IAEH,2CAAiB,GAAjB,UAAkB,GAAY,IAAkB,MAAM,CAAC,CAAC,CAAC;IAO3D,sBAAC;AAAD,CApCA,AAoCC,CApCoC,wBAAiB,GAoCrD;AANM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA7BA;IADC,cAAO,EAAE;;;;8CACyB;AAOnC;IADC,cAAO,EAAE;;;;0CACqB;AAO/B;IADC,cAAO,EAAE;;;;8CACyB;AASnC;IADC,cAAO,EAAE;;;;wDAC+C;AA7B9C,eAAe;IAR3B,aAAM,CAAC;QACN,UAAU,EAAE,iBAAiB;QAC7B,MAAM,EAAE,qCAAqC;QAC7C,SAAS,EAAE,iBAAiB;QAC5B,IAAI,EAAE,0DAA0D;QAChE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,eAAe,CAAC;KAC1D,CAAC;GAEW,eAAe,CAoC3B;AApCY,0CAAe","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Power Management\n * @description\n * The PowerManagement plugin offers access to the devices power-management functionality.\n * It should be used for applications which keep running for a long time without any user interaction.\n *\n * @usage\n * ```typescript\n * import { PowerManagement } from '@ionic-native/power-management';\n *\n * constructor(private powerManagement: PowerManagement) { }\n *\n * ...\n *\n * this.powerManagement.acquire()\n *   .then(onSuccess)\n *   .catch(onError);\n *\n * ```\n */\n@Plugin({\n  pluginName: 'PowerManagement',\n  plugin: 'cordova-plugin-powermanagement-orig',\n  pluginRef: 'powerManagement',\n  repo: 'https://github.com/Viras-/cordova-plugin-powermanagement',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone']\n})\n\nexport class PowerManagement extends IonicNativePlugin {\n  /**\n   * Acquire a wakelock by calling this.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  acquire(): Promise<any> { return; }\n\n  /**\n   * This acquires a partial wakelock, allowing the screen to be dimmed.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  dim(): Promise<any> { return; }\n\n  /**\n   * Release the wakelock. It's important to do this when you're finished with the wakelock, to avoid unnecessary battery drain.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  release(): Promise<any> { return; }\n\n  /**\n   * By default, the plugin will automatically release a wakelock when your app is paused (e.g. when the screen is turned off, or the user switches to another app).\n   * It will reacquire the wakelock upon app resume. If you would prefer to disable this behaviour, you can use this function.\n   * @param set {boolean}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setReleaseOnPause(set: boolean): Promise<any> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}