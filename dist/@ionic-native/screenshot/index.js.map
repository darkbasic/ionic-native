{"version":3,"sources":["../../../src/@ionic-native/plugins/screenshot/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAA+D;AAI/D;;;;;;;;;;;;;;;;;GAiBG;AASH,IAAa,UAAU;IAAS,8BAAiB;IAAjD;;IA4DA,CAAC;IA1DC;;;;;;;;;OASG;IACH,yBAAI,GAAJ,UAAK,MAAe,EAAE,OAAgB,EAAE,QAAiB;QACvD,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;YACd,SAAS,CAAC,UAAU,CAAC,IAAI,CACvB,UAAC,KAAU,EAAE,MAAW;gBACtB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,EACD,MAAM,EACN,OAAO,EACP,QAAQ,CACT,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,wBAAG,GAAH,UAAI,OAAgB;QAClB,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;YACd,SAAS,CAAC,UAAU,CAAC,GAAG,CACtB,UAAC,KAAU,EAAE,MAAW;gBACtB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,EACD,OAAO,CACR,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAOH,iBAAC;AAAD,CA5DA,AA4DC,CA5D+B,wBAAiB,GA4DhD;AANM,qBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3DW,UAAU;IARtB,aAAM,CAAC;QACN,UAAU,EAAE,YAAY;QACxB,MAAM,EAAE,mCAAmC;QAC3C,SAAS,EAAE,sBAAsB;QACjC,IAAI,EAAE,gDAAgD;QACtD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC;KACvC,CAAC;GAEW,UAAU,CA4DtB;AA5DY,gCAAU","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, IonicNativePlugin } from '@ionic-native/core';\n\ndeclare const navigator: any;\n\n/**\n * @name Screenshot\n * @description Captures a screen shot\n * @usage\n * ```typescript\n * import { Screenshot } from '@ionic-native/screenshot';\n *\n * constructor(private screenshot: Screenshot) { }\n *\n * ...\n *\n * // Take a screenshot and save to file\n * this.screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);\n *\n * // Take a screenshot and get temporary file URI\n * this.screenshot.URI(80).then(onSuccess, onError);\n * ```\n */\n@Plugin({\n  pluginName: 'Screenshot',\n  plugin: 'com.darktalker.cordova.screenshot',\n  pluginRef: 'navigator.screenshot',\n  repo: 'https://github.com/gitawego/cordova-screenshot',\n  platforms: ['Android', 'iOS', 'macOS']\n})\n\nexport class Screenshot extends IonicNativePlugin {\n\n  /**\n   *  Takes screenshot and saves the image\n   *\n   * @param format {string} Format can take the value of either 'jpg' or 'png'\n   * On ios, only 'jpg' format is supported\n   * @param quality {number}  Determines the quality of the screenshot.\n   *        Default quality is set to 100.\n   * @param filename {string} Name of the file as stored on the storage\n   * @returns {Promise<any>}\n   */\n  save(format?: string, quality?: number, filename?: string): Promise<any> {\n    return new Promise<any>(\n      (resolve, reject) => {\n        navigator.screenshot.save(\n          (error: any, result: any) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          },\n          format,\n          quality,\n          filename\n        );\n      }\n    );\n  }\n\n  /**\n   *  Takes screenshot and returns the image as an URI\n   *\n   * @param quality {number} Determines the quality of the screenshot.\n   *        Default quality is set to 100.\n   * @returns {Promise<any>}\n   */\n  URI(quality?: number): Promise<any> {\n    return new Promise<any>(\n      (resolve, reject) => {\n        navigator.screenshot.URI(\n          (error: any, result: any) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          },\n          quality\n        );\n      }\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}