{"version":3,"sources":["../../../src/@ionic-native/plugins/battery-status/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AACxE,8CAA6C;AAgB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IAsCA,CAAC;IApCC;;;OAGG;IAKH,gCAAQ,GAAR,cAAgD,MAAM,CAAC,CAAC,CAAC;IAEzD;;;OAGG;IAKH,6BAAK,GAAL,cAA6C,MAAM,CAAC,CAAC,CAAC;IAEtD;;;OAGG;IAKH,kCAAU,GAAV,cAAkD,MAAM,CAAC,CAAC,CAAC;IAQ7D,oBAAC;AAAD,CAtCA,AAsCC,CAtCkC,wBAAiB,GAsCnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3BA;IAJC,cAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,eAAe;KACvB,CAAC;;;oCACU,uBAAU;6CAAmC;AAUzD;IAJC,cAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,YAAY;KACpB,CAAC;;;oCACO,uBAAU;0CAAmC;AAUtD;IAJC,cAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,iBAAiB;KACzB,CAAC;;;oCACY,uBAAU;+CAAmC;AA9BhD,aAAa;IARzB,aAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,+BAA+B;QACvC,SAAS,EAAE,mBAAmB;QAC9B,IAAI,EAAE,yDAAyD;QAC/D,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;KACxH,CAAC;GAEW,aAAa,CAsCzB;AAtCY,sCAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface BatteryStatusResponse {\n\n  /**\n   * The battery charge percentage\n   */\n  level: number;\n\n  /**\n   * A boolean that indicates whether the device is plugged in\n   */\n  isPlugged: boolean;\n\n}\n\n/**\n * @name Battery Status\n * @description\n * Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).\n *\n * @usage\n * ```typescript\n * import { BatteryStatus } from '@ionic-native/battery-status';\n *\n * constructor(private batteryStatus: BatteryStatus) { }\n *\n * ...\n *\n *\n * // watch change in battery status\n * let subscription = this.batteryStatus.onChange().subscribe(\n *  (status: BatteryStatusResponse) => {\n *    console.log(status.level, status.isPlugged);\n *  }\n * );\n *\n * // stop watch\n * subscription.unsubscribe();\n *\n * ```\n * @interfaces\n * BatteryStatusResponse\n */\n@Plugin({\n  pluginName: 'BatteryStatus',\n  plugin: 'cordova-plugin-battery-status',\n  pluginRef: 'navigator.battery',\n  repo: 'https://github.com/apache/cordova-plugin-battery-status',\n  platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows']\n})\n\nexport class BatteryStatus extends IonicNativePlugin {\n\n  /**\n   * Watch the change in battery level\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterystatus'\n  })\n  onChange(): Observable<BatteryStatusResponse> { return; }\n\n  /**\n   * Watch when the battery level goes low\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterylow'\n  })\n  onLow(): Observable<BatteryStatusResponse> { return; }\n\n  /**\n   * Watch when the battery level goes to critial\n   * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'batterycritical'\n  })\n  onCritical(): Observable<BatteryStatusResponse> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}