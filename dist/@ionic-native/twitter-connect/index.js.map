{"version":3,"sources":["../../../src/@ionic-native/plugins/twitter-connect/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AAqBxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AAWH,IAAa,cAAc;IAAS,kCAAiB;IAArD;;IA0BA,CAAC;IAzBC;;;OAGG;IAEH,8BAAK,GAAL,cAA2C,MAAM,CAAC,CAAC,CAAC;IACpD;;;OAGG;IAEH,+BAAM,GAAN,cAAyB,MAAM,CAAC,CAAC,CAAC;IAElC;;;OAGG;IAEH,iCAAQ,GAAR,cAA2B,MAAM,CAAC,CAAC,CAAC;IAOtC,qBAAC;AAAD,CA1BA,AA0BC,CA1BmC,wBAAiB,GA0BpD;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAnBA;IADC,cAAO,EAAE;;;;2CAC0C;AAMpD;IADC,cAAO,EAAE;;;;4CACwB;AAOlC;IADC,cAAO,EAAE;;;;8CAC0B;AAnBzB,cAAc;IAV1B,aAAM,CAAC;QACN,UAAU,EAAE,gBAAgB;QAC5B,MAAM,EAAE,wBAAwB;QAChC,SAAS,EAAE,gBAAgB;QAC3B,IAAI,EAAE,iDAAiD;QACvD,OAAO,EAAE,mNAAmN;QAC5N,gBAAgB,EAAE,CAAC,YAAY,EAAE,aAAa,EAAE,gBAAgB,CAAC;QACjE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,cAAc,CA0B1B;AA1BY,wCAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface TwitterConnectResponse {\n  /**\n   * Twitter Username\n   */\n  userName: string;\n  /**\n   * Twitter User ID\n   */\n  userId: string;\n  /**\n   * Twitter OAuth Secret\n   */\n  secret: string;\n  /**\n   * Twitter OAuth Token\n   */\n  token: string;\n}\n\n/**\n * @name Twitter Connect\n * @description\n * Plugin to use Twitter Single Sign On\n * Uses Twitter's Fabric SDK\n * ```typescript\n * import { TwitterConnect } from '@ionic-native/twitter-connect';\n *\n * constructor(private twitter: TwitterConnect) { }\n *\n * ...\n *\n * function onSuccess(response) {\n *   console.log(response);\n *\n *   // Will console log something like:\n *   // {\n *   //   userName: 'myuser',\n *   //   userId: '12358102',\n *   //   secret: 'tokenSecret'\n *   //   token: 'accessTokenHere'\n *   // }\n * }\n *\n * this.twitter.login().then(onSuccess, onError);\n *\n * this.twitter.logout().then(onLogoutSuccess, onLogoutError);\n * ```\n * @interfaces\n * TwitterConnectResponse\n */\n@Plugin({\n  pluginName: 'TwitterConnect',\n  plugin: 'twitter-connect-plugin',\n  pluginRef: 'TwitterConnect',\n  repo: 'https://github.com/chroa/twitter-connect-plugin',\n  install: 'ionic cordova plugin add https://github.com/chroa/twitter-connect-plugin --variable FABRIC_KEY=<Fabric API Key> --variable TWITTER_KEY=<Twitter Consumer Key> --variable TWITTER_SECRET=<Twitter Consumer Secret>',\n  installVariables: ['FABRIC_KEY', 'TWITTER_KEY', 'TWITTER_SECRET'],\n  platforms: ['Android', 'iOS']\n})\n\nexport class TwitterConnect extends IonicNativePlugin {\n  /**\n   * Logs in\n   * @returns {Promise<TwitterConnectResponse>} returns a promise that resolves if logged in and rejects if failed to login\n   */\n  @Cordova()\n  login(): Promise<TwitterConnectResponse> { return; }\n  /**\n   * Logs out\n   * @returns {Promise<any>} returns a promise that resolves if logged out and rejects if failed to logout\n   */\n  @Cordova()\n  logout(): Promise<any> { return; }\n\n  /**\n   * Returns user's profile information\n   * @returns {Promise<any>} returns a promise that resolves if user profile is successfully retrieved and rejects if request fails\n   */\n  @Cordova()\n  showUser(): Promise<any> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}