{"version":3,"sources":["../../../src/@ionic-native/plugins/pin-dialog/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AAGxE;;;;;;;;;;;;;;;;;;;;;GAqBG;AASH,IAAa,SAAS;IAAS,6BAAiB;IAAhD;;IAoBA,CAAC;IAnBC;;;;;;OAMG;IAKH,0BAAM,GAAN,UAAO,OAAe,EAAE,KAAa,EAAE,OAAiB,IAAsD,MAAM,CAAC,CAAC,CAAC;IAQzH,gBAAC;AAAD,CApBA,AAoBC,CApB8B,wBAAiB,GAoB/C;AANM,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAPA;IAJC,cAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC,CAAC,oBAAoB;KACnC,CAAC;;;;uCACqH;AAZ5G,SAAS;IARrB,aAAM,CAAC;QACN,UAAU,EAAE,WAAW;QACvB,MAAM,EAAE,2BAA2B;QACnC,SAAS,EAAE,mBAAmB;QAC9B,IAAI,EAAE,qCAAqC;QAC3C,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,SAAS,CAoBrB;AApBY,8BAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Pin Dialog\n * @description\n *\n * @usage\n * ```typescript\n * import { PinDialog } from '@ionic-native/pin-dialog';\n *\n *\n * constructor(private pinDialog: PinDialog) { }\n *\n * ...\n *\n * this.pinDialog.prompt('Enter your PIN', 'Verify PIN', ['OK', 'Cancel'])\n *   .then(\n *     (result: any) => {\n *       if (result.buttonIndex == 1) console.log('User clicked OK, value is: ', result.input1);\n *       else if(result.buttonIndex == 2) console.log('User cancelled');\n *     }\n *   );\n * ```\n */\n@Plugin({\n  pluginName: 'PinDialog',\n  plugin: 'cordova-plugin-pin-dialog',\n  pluginRef: 'plugins.pinDialog',\n  repo: 'https://github.com/Paldom/PinDialog',\n  platforms: ['Android', 'iOS']\n})\n\nexport class PinDialog extends IonicNativePlugin {\n  /**\n   * Show pin dialog\n   * @param {string} message Message to show the user\n   * @param {string} title Title of the dialog\n   * @param {string[]} buttons Buttons to show\n   * @returns {Promise<{ buttonIndex: number, input1: string }>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 4 // no error callback\n  })\n  prompt(message: string, title: string, buttons: string[]): Promise<{ buttonIndex: number, input1: string }> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}