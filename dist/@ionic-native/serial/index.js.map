{"version":3,"sources":["../../../src/@ionic-native/plugins/serial/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,2CAAwE;AACxE,8CAA6C;AAoB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AASH,IAAa,MAAM;IAAS,0BAAiB;IAA7C;;IAyEA,CAAC;IAvEC;;;;;OAKG;IAKH,kCAAiB,GAAjB,UAAkB,OAAiC,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9E;;;;;OAKG;IAEH,qBAAI,GAAJ,UAAK,OAA0B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1D;;;;;OAKG;IAEH,sBAAK,GAAL,UAAM,IAAS,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1C;;;;;OAKG;IAEH,yBAAQ,GAAR,UAAS,IAAS,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7C;;;;OAIG;IAEH,qBAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;OAIG;IAIH,qCAAoB,GAApB,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;;OAIG;IAEH,sBAAK,GAAL,cAAwB,MAAM,CAAC,CAAC,CAAC;IAQnC,aAAC;AAAD,CAzEA,AAyEC,CAzE2B,wBAAiB,GAyE5C;AANM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA5DA;IAJC,cAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;+CAC4E;AAS9E;IADC,cAAO,EAAE;;;;kCACgD;AAS1D;IADC,cAAO,EAAE;;;;mCACgC;AAS1C;IADC,cAAO,EAAE;;;;sCACmC;AAQ7C;IADC,cAAO,EAAE;;;;kCACsB;AAUhC;IAHC,cAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACsB,uBAAU;kDAAiB;AAQnD;IADC,cAAO,EAAE;;;;mCACuB;AAjEtB,MAAM;IARlB,aAAM,CAAC;QACN,UAAU,EAAE,QAAQ;QACpB,MAAM,EAAE,eAAe;QACvB,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,4CAA4C;QAClD,SAAS,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;KACjC,CAAC;GAEW,MAAM,CAyElB;AAzEY,wBAAM","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare var serial: any;\n\nexport interface SerialPermissionOptions {\n  vid: string;\n  pid: string;\n  driver: string;\n}\n\nexport interface SerialOpenOptions {\n  baudRate: number;\n  dataBits: number;\n  stopBits: number;\n  parity: number;\n  dtr: boolean;\n  rts: boolean;\n  sleepOnPause: boolean;\n}\n\n/**\n * @name Serial\n * @description\n * This plugin provides functions for working with Serial connections\n *\n * @usage\n * ```typescript\n * import { Serial } from '@ionic-native/serial';\n *\n * constructor(private serial: Serial) { }\n *\n * ...\n *\n * this.serial.requestPermission().then(() => {\n *   this.serial.open({\n *     baudRate: 9800,\n *     dataBits: 4,\n *     stopBits: 1,\n *     parity: 0,\n *     dtr: true,\n *     rts: true,\n *     sleepOnPause: false\n *   }).then(() => {\n *     console.log('Serial connection opened');\n *   });\n * }).catch((error: any) => console.log(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Serial',\n  plugin: 'cordovarduino',\n  pluginRef: 'serial',\n  repo: 'https://github.com/xseignard/cordovarduino',\n  platforms: ['Android', 'Ubuntu']\n})\n\nexport class Serial extends IonicNativePlugin {\n\n  /**\n   * Request permission to connect to a serial device\n   *\n   * @param options {SerialPermissionOptions} Options used to request serial permissions for an unknown device\n   * @return {Promise<any>} Returns a promise that resolves when permissions are granted\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  requestPermission(options?: SerialPermissionOptions): Promise<any> { return; }\n\n  /**\n   * Open connection to a serial device\n   *\n   * @param options {SerialOpenOptions} Options used to open serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the serial connection is opened\n   */\n  @Cordova()\n  open(options: SerialOpenOptions): Promise<any> { return; }\n\n  /**\n   * Write to a serial connection\n   *\n   * @param data {any} data to write to the serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the write is complete\n   */\n  @Cordova()\n  write(data: any): Promise<any> { return; }\n\n  /**\n   * Write hex to a serial connection\n   *\n   * @param data {any} data to write to the serial connection\n   * @return {Promise<any>} Returns a promise that resolves when the write is complete\n   */\n  @Cordova()\n  writeHex(data: any): Promise<any> { return; }\n\n  /**\n   * Read from a serial connection\n   *\n   * @return {Promise<any>} Returns a promise that resolves with data read from the serial connection\n   */\n  @Cordova()\n  read(): Promise<any> { return; }\n\n  /**\n   * Watch the incoming data from the serial connection. Clear the watch by unsubscribing from the observable\n   *\n   * @returns {Observable<any>} Observable returns an observable that you can subscribe to\n   */\n  @Cordova({\n    observable: true\n  })\n  registerReadCallback(): Observable<any> { return; }\n\n  /**\n   * Close the serial connection\n   *\n   * @return {Promise<any>} Returns a promise that resolves when the serial connection is closed\n   */\n  @Cordova()\n  close(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}